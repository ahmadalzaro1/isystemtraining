// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { SupabaseClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Read Supabase config from runtime meta tags to avoid hardcoding credentials
const getMeta = (name: string): string | null => {
  const el = document.querySelector(`meta[name="${name}"]`) as HTMLMetaElement | null;
  return el?.content?.trim() || null;
};

const SUPABASE_URL = getMeta('x-supabase-url') || '';
const SUPABASE_PUBLISHABLE_KEY = getMeta('x-supabase-anon-key') || '';

const createSupabaseOrShim = (): SupabaseClient<Database> => {
  if (SUPABASE_URL && SUPABASE_PUBLISHABLE_KEY) {
    return createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        storage: localStorage,
        persistSession: true,
        autoRefreshToken: true,
      }
    });
  }

  // eslint-disable-next-line no-console
  console.error('Supabase not configured. Please set <meta name="x-supabase-url"> and <meta name="x-supabase-anon-key"> in index.html.');

  const errorFactory = () => {
    throw new Error('Supabase not configured. Populate meta tags x-supabase-url and x-supabase-anon-key.');
  };

  const fnProxy = new Proxy(errorFactory as any, {
    apply() { return errorFactory(); },
    get() { return fnProxy; }
  });

  // Create a very forgiving shim that won't crash on property access,
  // but will throw if any method is actually invoked.
  const shim = new Proxy({}, {
    get() {
      return fnProxy;
    }
  });

  return shim as unknown as SupabaseClient<Database>;
};

export const supabase = createSupabaseOrShim();